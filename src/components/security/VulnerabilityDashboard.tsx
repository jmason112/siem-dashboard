import React, { useState } from "react";
import { useSecurityStore } from "../../stores/securityStore";
import { Card } from "../ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "../ui/table";
import { Badge } from "../ui/badge";
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../ui/select";
import { Loader2, Search } from "lucide-react";

const severityColors = {
  critical: "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400",
  high: "bg-orange-100 text-orange-800 dark:bg-orange-900/30 dark:text-orange-400",
  medium:
    "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400",
  low: "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400",
};

const statusColors = {
  open: "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400",
  in_progress:
    "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400",
  resolved:
    "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400",
  false_positive:
    "bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400",
};

export const VulnerabilityDashboard: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const {
    vulnerabilities,
    vulnerabilityStats,
    vulnerabilityLoading,
    updateVulnerabilityStatus,
    setFilters,
    page,
    totalPages,
    setPage,
  } = useSecurityStore();

  const handleStatusChange = async (id: string, status: string) => {
    await updateVulnerabilityStatus(id, status);
  };

  const filteredVulnerabilities =
    vulnerabilities?.filter(
      (vuln) =>
        vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.asset_id.toLowerCase().includes(searchTerm.toLowerCase())
    ) || [];

  return (
    <div className="space-y-6">
      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card className="p-4">
          <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">
            Total Vulnerabilities
          </h3>
          <p className="text-2xl font-bold mt-2">
            {vulnerabilityStats?.total || 0}
          </p>
        </Card>
        <Card className="p-4">
          <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">
            Critical
          </h3>
          <p className="text-2xl font-bold mt-2 text-red-600">
            {vulnerabilityStats?.bySeverity?.critical || 0}
          </p>
        </Card>
        <Card className="p-4">
          <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">
            Open
          </h3>
          <p className="text-2xl font-bold mt-2 text-orange-600">
            {vulnerabilityStats?.byStatus?.open || 0}
          </p>
        </Card>
        <Card className="p-4">
          <h3 className="text-sm font-medium text-gray-500 dark:text-gray-400">
            Resolved
          </h3>
          <p className="text-2xl font-bold mt-2 text-green-600">
            {vulnerabilityStats?.byStatus?.resolved || 0}
          </p>
        </Card>
      </div>

      {/* Filters and Search */}
      <Card className="p-4">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search vulnerabilities..."
                className="pl-8"
                value={searchTerm}
                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>
                  setSearchTerm(e.target.value)
                }
              />
            </div>
          </div>
          <div className="flex gap-2">
            <Select
              onValueChange={(value) => setFilters({ severity: [value] })}
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by Severity" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severities</SelectItem>
                <SelectItem value="critical">Critical</SelectItem>
                <SelectItem value="high">High</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="low">Low</SelectItem>
              </SelectContent>
            </Select>

            <Select onValueChange={(value) => setFilters({ status: [value] })}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Filter by Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Statuses</SelectItem>
                <SelectItem value="open">Open</SelectItem>
                <SelectItem value="in_progress">In Progress</SelectItem>
                <SelectItem value="resolved">Resolved</SelectItem>
                <SelectItem value="false_positive">False Positive</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
      </Card>

      {/* Vulnerabilities Table */}
      <Card>
        <div className="p-4 border-b">
          <h2 className="text-lg font-semibold">Vulnerabilities</h2>
        </div>
        {vulnerabilityLoading ? (
          <div className="flex justify-center items-center h-64">
            <Loader2 className="h-8 w-8 animate-spin" />
          </div>
        ) : !filteredVulnerabilities?.length ? (
          <div className="text-center py-8 text-gray-500">
            No vulnerabilities found
          </div>
        ) : (
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Title</TableHead>
                <TableHead>Severity</TableHead>
                <TableHead>CVSS Score</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Asset</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredVulnerabilities.map((vuln) => (
                <TableRow key={vuln._id}>
                  <TableCell>
                    <div>
                      <p className="font-medium">{vuln.title}</p>
                      <p className="text-sm text-gray-500">
                        {vuln.description}
                      </p>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge
                      className={
                        severityColors[
                          vuln.severity as
                            | "critical"
                            | "high"
                            | "medium"
                            | "low"
                        ]
                      }
                    >
                      {vuln.severity}
                    </Badge>
                  </TableCell>
                  <TableCell>{vuln.cvss_score}</TableCell>
                  <TableCell>
                    <Badge
                      className={
                        statusColors[
                          vuln.status as
                            | "open"
                            | "in_progress"
                            | "resolved"
                            | "false_positive"
                        ]
                      }
                    >
                      {vuln.status.replace("_", " ")}
                    </Badge>
                  </TableCell>
                  <TableCell>{vuln.asset_id}</TableCell>
                  <TableCell>
                    <select
                      value={vuln.status}
                      onChange={(e) =>
                        handleStatusChange(vuln._id, e.target.value)
                      }
                      className="border rounded p-1 text-sm bg-background text-foreground dark:bg-gray-800 dark:text-gray-100 dark:border-gray-700"
                    >
                      <option value="open">Open</option>
                      <option value="in_progress">In Progress</option>
                      <option value="resolved">Resolved</option>
                      <option value="false_positive">False Positive</option>
                    </select>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        )}
        {/* Pagination */}
        {totalPages > 1 && (
          <div className="flex justify-center items-center space-x-2 p-4">
            <Button
              onClick={() => setPage(page - 1)}
              disabled={page === 1}
              variant="outline"
              size="sm"
            >
              Previous
            </Button>
            <span className="text-sm text-gray-600">
              Page {page} of {totalPages}
            </span>
            <Button
              onClick={() => setPage(page + 1)}
              disabled={page === totalPages}
              variant="outline"
              size="sm"
            >
              Next
            </Button>
          </div>
        )}
      </Card>
    </div>
  );
};
